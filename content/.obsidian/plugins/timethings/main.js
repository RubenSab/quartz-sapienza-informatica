/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TimeThings
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_obsidian3 = require("obsidian");

// src/BOMS.ts
function getValue(obj, fieldPath) {
  const keys = fieldPath.split(".");
  let value = obj;
  for (const key of keys) {
    value = value[key];
    if (value === void 0) {
      return void 0;
    }
  }
  return value;
}
function setValue(obj, path, value) {
  const keys = path.split(".");
  let currentLevel = obj;
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (!currentLevel[key]) {
      currentLevel[key] = {};
    }
    currentLevel = currentLevel[key];
  }
  currentLevel[keys[keys.length - 1]] = value;
}

// src/CAMS.ts
function isLineIndented(line) {
  return /^[\s\t]/.test(line);
}
function isFrontmatterPresent(editor) {
  if (editor.getLine(0) !== "---") {
    return false;
  }
  for (let i = 1; i <= editor.lastLine(); i++) {
    if (editor.getLine(i) === "---") {
      return true;
    }
  }
  return false;
}
function frontmatterEndLine(editor) {
  if (isFrontmatterPresent(editor)) {
    for (let i = 1; i <= editor.lastLine(); i++) {
      if (editor.getLine(i) === "---") {
        return i;
      }
    }
  }
  return void 0;
}
function getLine(editor, fieldPath) {
  const frontmatterLine = frontmatterEndLine(editor);
  const keys = fieldPath.split(".");
  const depth = keys.length;
  if (frontmatterLine === void 0) {
    return void 0;
  }
  let targetDepth = 1;
  let currentDepth = 1;
  let startLine = 1;
  let emergingPath = [];
  for (const key of keys) {
    for (let i = startLine; i <= frontmatterLine; i++) {
      const currentLine = editor.getLine(i);
      const currentField = currentLine.split(":");
      const currentFieldName = currentField[0].trim();
      if (currentFieldName === key) {
        emergingPath.push(currentFieldName);
        let targetPath = fieldPath.split(".");
        let targetPathShrink = targetPath.slice(0, emergingPath.length);
        if (targetPathShrink.join(".") === emergingPath.join(".") === false) {
          emergingPath.pop();
          startLine = i + 1;
          continue;
        } else {
          if (emergingPath.join(".") === fieldPath) {
            if (targetDepth > 1) {
              if (this.isLineIndented(currentLine) === false) {
                return void 0;
              }
            } else {
              if (isLineIndented(currentLine)) {
                startLine = i + 1;
                emergingPath = [];
                continue;
              }
            }
            return i;
          }
          startLine = i + 1;
          targetDepth += 1;
          continue;
        }
      }
    }
  }
  return void 0;
}
function setValue2(editor, fieldPath, fieldValue) {
  const fieldLine = getLine(editor, fieldPath);
  if (fieldLine === void 0) {
    return;
  }
  const initialLine = editor.getLine(fieldLine).split(":", 1);
  const newLine = initialLine[0] + ": " + fieldValue;
  editor.setLine(fieldLine, newLine);
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  clockFormat: "hh:mm A",
  updateIntervalMilliseconds: "1000",
  isUTC: false,
  modifiedKeyName: "updated_at",
  modifiedKeyFormat: "YYYY-MM-DD[T]HH:mm:ss.SSSZ",
  enableClock: true,
  enableModifiedKeyUpdate: true,
  useCustomFrontmatterHandlingSolution: false,
  updateIntervalFrontmatterMinutes: 1,
  editDurationPath: "edited_seconds",
  enableEditDurationKey: true,
  nonTypingEditingTimePercentage: 22
};
var TimeThingsSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const createLink = () => {
      const linkEl = document.createDocumentFragment();
      linkEl.append(
        linkEl.createEl("a", {
          href: "https://momentjscom.readthedocs.io/en/latest/moment/04-displaying/01-format/",
          text: "Moment.js date format documentation"
        })
      );
      return linkEl;
    };
    new import_obsidian.Setting(containerEl).setName("Use custom frontmatter handling solution").setDesc("Smoother experiene. Prone to bugs if you use a nested value.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useCustomFrontmatterHandlingSolution).onChange(async (newValue) => {
        this.plugin.settings.useCustomFrontmatterHandlingSolution = newValue;
        await this.plugin.saveSettings();
        await this.display();
      })
    );
    containerEl.createEl("h1", { text: "Status bar" });
    containerEl.createEl("p", { text: "Displays clock in the status bar." });
    new import_obsidian.Setting(containerEl).setName("Enable status bar clock").setDesc("Show clock on the status bar? This setting requires restart of the plugin.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableClock).onChange(async (newValue) => {
        this.plugin.settings.enableClock = newValue;
        await this.plugin.saveSettings();
        await this.display();
      })
    );
    if (this.plugin.settings.enableClock === true) {
      new import_obsidian.Setting(containerEl).setName("Date format").setDesc(createLink()).addText(
        (text) => text.setPlaceholder("hh:mm A").setValue(this.plugin.settings.clockFormat).onChange(async (value) => {
          this.plugin.settings.clockFormat = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("Update interval").setDesc("In milliseconds. Restart plugin for this setting to take effect.").addText(
        (text) => text.setPlaceholder("1000").setValue(this.plugin.settings.updateIntervalMilliseconds).onChange(async (value) => {
          this.plugin.settings.updateIntervalMilliseconds = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("UTC timezone").setDesc("Use UTC instead of local time?").addToggle(
        (toggle) => toggle.setValue(this.plugin.settings.isUTC).onChange(async (newValue) => {
          this.plugin.settings.isUTC = newValue;
          await this.plugin.saveSettings();
        })
      );
    }
    containerEl.createEl("h1", { text: "Frontmatter" });
    containerEl.createEl("p", { text: "Handles timestamp keys in frontmatter." });
    containerEl.createEl("h2", { text: "\u{1F511} Modified" });
    new import_obsidian.Setting(containerEl).setName("Enable update of the modified key").setDesc("").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableModifiedKeyUpdate).onChange(async (newValue) => {
        this.plugin.settings.enableModifiedKeyUpdate = newValue;
        await this.plugin.saveSettings();
        await this.display();
      })
    );
    if (this.plugin.settings.enableModifiedKeyUpdate === true) {
      new import_obsidian.Setting(containerEl).setName("Modified key name").setDesc("Supports nested keys. For example `timethings.updated_at`").addText(
        (text) => text.setPlaceholder("updated_at").setValue(this.plugin.settings.modifiedKeyName).onChange(async (value) => {
          this.plugin.settings.modifiedKeyName = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("Modified key format").setDesc(createLink()).addText(
        (text) => text.setPlaceholder("YYYY-MM-DD[T]HH:mm:ss.SSSZ").setValue(this.plugin.settings.modifiedKeyFormat).onChange(async (value) => {
          this.plugin.settings.modifiedKeyFormat = value;
          await this.plugin.saveSettings();
        })
      );
      if (this.plugin.settings.useCustomFrontmatterHandlingSolution === false) {
        new import_obsidian.Setting(containerEl).setName("Interval between updates").setDesc("Only for Obsidian frontmatter API.").addSlider(
          (slider) => slider.setLimits(1, 15, 1).setValue(this.plugin.settings.updateIntervalFrontmatterMinutes).onChange(async (value) => {
            this.plugin.settings.updateIntervalFrontmatterMinutes = value;
            await this.plugin.saveSettings();
          }).setDynamicTooltip()
        );
      }
    }
    containerEl.createEl("h2", { text: "\u{1F511} Edit duration" });
    containerEl.createEl("p", { text: "Track for how long you have been editing a note." });
    new import_obsidian.Setting(containerEl).setName("Enable edit duration key").setDesc("").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableEditDurationKey).onChange(async (newValue) => {
      this.plugin.settings.enableEditDurationKey = newValue;
      await this.plugin.saveSettings();
      await this.display();
    }));
    if (this.plugin.settings.enableEditDurationKey === true) {
      new import_obsidian.Setting(containerEl).setName("Edit duration key name").setDesc("Supports nested keys. For example `timethings.edited_seconds`").addText((text) => text.setPlaceholder("edited_seconds").setValue(this.plugin.settings.editDurationPath).onChange(async (value) => {
        this.plugin.settings.editDurationPath = value;
        await this.plugin.saveSettings();
      }));
      const descA = document.createDocumentFragment();
      descA.append(
        "The portion of time you are not typing when editing a note. Works best with custom frontmatter handling solution. ",
        createEl("a", {
          href: "https://github.com/DynamicPlayerSector/timethings/wiki/Calculating-your-non%E2%80%90typing-editing-percentage",
          text: "How to calculate yours?"
        })
      );
      new import_obsidian.Setting(containerEl).setName("Non-typing editing time percentage").setDesc(descA).addSlider(
        (slider) => slider.setLimits(0, 40, 2).setValue(this.plugin.settings.nonTypingEditingTimePercentage).onChange(async (value) => {
          this.plugin.settings.nonTypingEditingTimePercentage = value;
          await this.plugin.saveSettings();
        }).setDynamicTooltip()
      );
    }
    containerEl.createEl("h1", { text: "Danger zone" });
    containerEl.createEl("p", { text: "You've been warned!" });
    new import_obsidian.Setting(containerEl).setName("Reset settings").setDesc("Resets settings to default").addButton(
      (btn) => btn.setIcon("switch").setButtonText("Reset settings").setTooltip("Reset settings").onClick(() => {
        this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS, this.plugin.loadData());
        this.display();
      })
    );
  }
};

// src/time.utils.ts
function momentToClockEmoji(time) {
  const hour = time.hour();
  const hour12 = hour % 12 || 12;
  const clockEmojiMap = {
    1: "\u{1F550}",
    2: "\u{1F551}",
    3: "\u{1F552}",
    4: "\u{1F553}",
    5: "\u{1F554}",
    6: "\u{1F555}",
    7: "\u{1F556}",
    8: "\u{1F557}",
    9: "\u{1F558}",
    10: "\u{1F559}",
    11: "\u{1F55A}",
    12: "\u{1F55B}"
  };
  const result = clockEmojiMap[hour12] || "\u23F0";
  return result;
}

// src/main.ts
var TimeThings = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.isProccessing = false;
  }
  async onload() {
    await this.loadSettings();
    this.isDebugBuild = false;
    this.allowEditDurationUpdate = true;
    this.setUpStatusBarItems();
    this.registerFileModificationEvent();
    this.registerKeyDownDOMEvent();
    this.registerLeafChangeEvent();
    this.registerMouseDownDOMEvent();
    this.addSettingTab(new TimeThingsSettingsTab(this.app, this));
  }
  registerMouseDownDOMEvent() {
    this.registerDomEvent(document, "mousedown", (evt) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView === null) {
        return;
      }
      const editor = activeView.editor;
      if (editor.hasFocus() === false) {
        return;
      }
      if (this.settings.useCustomFrontmatterHandlingSolution === true) {
        if (this.settings.enableEditDurationKey) {
          this.setEditDurationBar(true, editor);
        }
      }
    });
  }
  registerLeafChangeEvent() {
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView === null) {
        return;
      }
      const editor = activeView.editor;
      if (editor.hasFocus() === false) {
        return;
      }
      this.settings.enableEditDurationKey && this.settings.useCustomFrontmatterHandlingSolution && this.setEditDurationBar(true, editor);
    }));
  }
  registerKeyDownDOMEvent() {
    this.registerDomEvent(document, "keyup", (evt) => {
      if (evt.ctrlKey) {
        return;
      }
      if (this.settings.useCustomFrontmatterHandlingSolution === true) {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView === null) {
          if (this.isDebugBuild) {
            console.log("No active view");
          }
          return;
        }
        const editor = activeView.editor;
        if (editor.hasFocus() === false) {
          if (this.isDebugBuild) {
            console.log("No focus");
          }
          return;
        }
        const dateNow = (0, import_obsidian3.moment)();
        const userDateFormat = this.settings.modifiedKeyFormat;
        const dateFormatted = dateNow.format(userDateFormat);
        const userModifiedKeyName = this.settings.modifiedKeyName;
        const valueLineNumber = getLine(editor, userModifiedKeyName);
        if (typeof valueLineNumber !== "number") {
          if (this.isDebugBuild) {
            console.log("Not a number");
          }
          return;
        }
        const value = editor.getLine(valueLineNumber).split(/:(.*)/s)[1].trim();
        if ((0, import_obsidian3.moment)(value, userDateFormat, true).isValid() === false) {
          if (this.isDebugBuild) {
            console.log("Wrong format");
          }
          return;
        }
        setValue2(editor, userModifiedKeyName, dateFormatted);
        if (this.settings.enableEditDurationKey) {
          this.allowEditDurationUpdate && this.updateEditDuration(editor);
          this.setEditDurationBar(true, editor);
        }
      }
    });
  }
  registerFileModificationEvent() {
    this.registerEvent(this.app.vault.on("modify", (file) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView === null) {
        return;
      }
      const editor = activeView.editor;
      if (this.settings.useCustomFrontmatterHandlingSolution === false) {
        if (this.settings.enableEditDurationKey) {
          this.allowEditDurationUpdate && this.standardUpdateEditDuration(file);
          this.setEditDurationBar(false, file);
        }
        if (this.settings.enableModifiedKeyUpdate) {
          this.standardUpdateModifiedKey(file);
        }
      }
    }));
  }
  setUpStatusBarItems() {
    if (this.settings.enableClock) {
      this.clockBar = this.addStatusBarItem();
      this.clockBar.setText(":)");
      this.updateClockBar();
      this.registerInterval(
        window.setInterval(this.updateClockBar.bind(this), +this.settings.updateIntervalMilliseconds)
      );
    }
    if (this.isDebugBuild) {
      this.debugBar = this.addStatusBarItem();
      this.debugBar.setText("\u2622\uFE0F DEBUG BUILD \u2622\uFE0F");
    }
    if (this.settings.enableEditDurationKey) {
      this.editDurationBar = this.addStatusBarItem();
      this.editDurationBar.setText("\u231B");
    }
  }
  async setEditDurationBar(useCustomSolution, solution) {
    let value = 0;
    if (solution instanceof import_obsidian2.Editor) {
      let editor = solution;
      const fieldLine = getLine(editor, this.settings.editDurationPath);
      if (fieldLine === void 0) {
        this.editDurationBar.setText("\u231B --");
        return;
      }
      value = +editor.getLine(fieldLine).split(/:(.*)/s)[1].trim();
    }
    if (solution instanceof import_obsidian2.TAbstractFile) {
      let file = solution;
      await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
        value = getValue(frontmatter, this.settings.editDurationPath);
        if (value === void 0) {
          value = 0;
        }
      });
    }
    let text = "";
    if (+value < 60) {
      text = `\u231B <1 m`;
    } else if (+value < 60 * 60) {
      const minutes = Math.floor(+value / 60);
      text = `\u231B ${minutes} m`;
    } else if (+value < 60 * 60 * 24) {
      const hours = Math.floor(+value / (60 * 60));
      const minutes = Math.floor((+value - hours * 60 * 60) / 60);
      text = `\u231B ${hours} h ${minutes} m`;
    } else {
      const days = Math.floor(+value / (24 * 60 * 60));
      const hours = Math.floor((+value - days * 24 * 60 * 60) / (60 * 60));
      text = `\u231B ${days} d ${hours} h`;
    }
    this.editDurationBar.setText(text);
  }
  async updateEditDuration(editor) {
    this.allowEditDurationUpdate = false;
    const fieldLine = getLine(editor, this.settings.editDurationPath);
    if (fieldLine === void 0) {
      this.allowEditDurationUpdate = true;
      return;
    }
    const value = editor.getLine(fieldLine).split(/:(.*)/s)[1].trim();
    const newValue = +value + 1;
    setValue2(editor, this.settings.editDurationPath, newValue.toString());
    await sleep(1e3 - this.settings.nonTypingEditingTimePercentage * 10);
    this.allowEditDurationUpdate = true;
  }
  async standardUpdateEditDuration(file) {
    this.allowEditDurationUpdate = false;
    await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      let value = getValue(frontmatter, this.settings.editDurationPath);
      if (value === void 0) {
        value = "0";
      }
      const newValue = +value + 10;
      setValue(frontmatter, this.settings.editDurationPath, newValue);
    });
    await sleep(1e4 - this.settings.nonTypingEditingTimePercentage * 100);
    this.allowEditDurationUpdate = true;
  }
  updateClockBar() {
    const dateNow = (0, import_obsidian3.moment)();
    const dateUTC = import_obsidian3.moment.utc();
    const dateChosen = this.settings.isUTC ? dateUTC : dateNow;
    const dateFormatted = dateChosen.format(this.settings.clockFormat);
    const emoji = momentToClockEmoji(dateChosen);
    this.clockBar.setText(emoji + " " + dateFormatted);
  }
  async standardUpdateModifiedKey(file) {
    await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      const dateNow = (0, import_obsidian3.moment)();
      const dateFormatted = dateNow.format(this.settings.modifiedKeyFormat);
      const updateKeyValue = (0, import_obsidian3.moment)(getValue(frontmatter, this.settings.modifiedKeyName), this.settings.modifiedKeyFormat);
      if (updateKeyValue.add(this.settings.updateIntervalFrontmatterMinutes, "minutes") > dateNow) {
        return;
      }
      setValue(frontmatter, this.settings.modifiedKeyName, dateFormatted);
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
